#!/usr/bin/bash
# A "Dakarand"-style PRNG inspired by PoC||GTFO 1.3
# 2024/gad (variant 1)
# A simple 'NOT' flip races the system clock + overhead,
# generating 'unpredictable' RNG. Theoretically.
# Dump a bunch to file, then test with
#   cat output.txt | sort | uniq -c
#
# So far, the results aren't great:
#   $ wc -l output.txt
#     749 output.txt
#   $ cat output.txt | sed 's/.* : //g' | sort | uniq -c
#     591 0
#     159 1
#
# That's uh...not evenly-distributed bruh :P
# But I think the problem is fixable

DURATION=33             # How long to flip coin (ms)
COIN=0                  # Could also start rand?
STARTED=$(date +%s%3N)

while (true); do
  COIN=$(( !COIN ))
  NOW=$(date +%s%3N)
  ELAPSED=$(( NOW - STARTED ))
  if [ $ELAPSED -gt $DURATION ]; then
    printf $COIN
    exit
  fi
  # Fancy debug:
  printf "\r%i < %i : %i" $ELAPSED $DURATION $COIN
done
